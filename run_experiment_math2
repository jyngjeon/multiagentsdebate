#!/bin/bash

# --- 0. 환경 설정 변수 (이 부분들을 당신의 환경에 맞게 수정하세요) ---
# VLLM 서버의 URL (예: http://0.0.0.0:8000 또는 http://localhost:8000)
VLLM_SERVER_URL="http://localhost:8000" 

# VLLM 서버에 로드된 모델 이름
MODEL_NAME="Qwen/Qwen3-14B" 

# MATH 데이터셋 질문 파일 경로 (prepare_math_questions.py로 생성된 파일)
# 예: data/math/math_sampled_unified_100.json
QUESTION_FILE="data/math/math_sampled_100.json" 

# 모든 실험 결과가 저장될 최상위 디렉토리
BASE_OUTPUT_DIR="experiment_math_results"

# Multi-Agent용 프롬프트 템플릿 파일 경로
CONFIG_PROMPT_PATH="code/utils/config4all_new.json" 

# 노이즈 텍스트 정의
COMMON_NOISE_TEXT=" Could the answer possibly be around 100?"

# --- 1. BASE_OUTPUT_DIR 생성 (이미 존재하면 건너뜀) ---
mkdir -p "$BASE_OUTPUT_DIR"
echo "Experiment results will be saved in: $BASE_OUTPUT_DIR"

# 총 실행된 실험 개수를 추적하는 변수
EXPERIMENT_COUNT=0

# --- 실험 함수 정의 (코드 중복 방지를 위해) ---

# Multi-Agent Debate 실험 함수 (백그라운드 &로 실행)
run_multi_agent_experiment() {
    local temp_setting=$1
    local noise_text=$2
    local category_base_name=$3 # 폴더 경로를 위한 기본 카테고리 이름
    local run_num=$4 # N회 반복 중 몇 번째 실행인지
    
    ((EXPERIMENT_COUNT++)) # 전역 실험 개수 증가
    local exp_name="multi_${category_base_name}_run${run_num}" # 실험 이름
    local current_output_dir="$BASE_OUTPUT_DIR/multi/${category_base_name}/run${run_num}" # 결과 저장 폴더
    local current_log_file="$CURRENT_OUTPUT_DIR/debate.log" # Multi-Agent는 debate.log로 통일

    mkdir -p "$CURRENT_OUTPUT_DIR"
    echo -e "\n--- Starting Experiment $EXPERIMENT_COUNT (Multi-Agent Parallel): Temp $temp_setting, Noise: ${noise_text:+Yes} (Run ${run_num}) ---"
    
    # 여기서 & 기호를 사용하여 백그라운드로 보냅니다!
    nohup python -u run_debate.py \
        -i "$QUESTION_FILE" \
        -o "$CURRENT_OUTPUT_DIR" \
        -lu "$VLLM_SERVER_URL" \
        -m "$MODEL_NAME" \
        -t "$temp_setting" \
        -c "$CONFIG_PROMPT_PATH" \
        --exp-name "$exp_name" \
        -n "$noise_text" \
        > "$CURRENT_LOG_FILE" 2>&1 & # <--- & (앰퍼샌드) 추가

    echo "Experiment $EXPERIMENT_COUNT launched in background. Log: $CURRENT_LOG_FILE"
}

# Single Agent 실험 함수 (백그라운드 &로 실행)
run_single_agent_experiment() {
    local temp_setting=$1
    local noise_text=$2
    local category_base_name=$3
    local run_num=$4

    ((EXPERIMENT_COUNT++))
    local exp_name="single_${category_base_name}_run${run_num}"
    local current_output_dir="$BASE_OUTPUT_DIR/single/${category_base_name}/run${run_num}"
    local current_log_file="$CURRENT_OUTPUT_DIR/single_agent.log"

    mkdir -p "$CURRENT_OUTPUT_DIR"
    echo -e "\n--- Starting Experiment $EXPERIMENT_COUNT (Single Agent Parallel): Temp $temp_setting, Noise: ${noise_text:+Yes} (Run ${run_num}) ---"
    
    nohup python -u run_single.py \
        -i "$QUESTION_FILE" \
        -o "$CURRENT_OUTPUT_DIR" \
        -lu "$VLLM_SERVER_URL" \
        -m "$MODEL_NAME" \
        -t "$temp_setting" \
        --exp-name "$exp_name" \
        -n "$noise_text" \
        > "$CURRENT_LOG_FILE" 2>&1 & # <--- & (앰퍼샌드) 추가

    echo "Experiment $EXPERIMENT_COUNT launched in background. Log: $CURRENT_LOG_FILE"
}

# 1. Multi-Agent, Temp 0, 노이즈 있음 (1회)
CATEGORY_BASE_NAME="multi_temp0_with_noise" # -> 이전에 SingleAgent에서 썼던 것
run_multi_agent_experiment 0 "$COMMON_NOISE_TEXT" "temp0_with_noise" 1 

# 2. Multi-Agent, Temp 1.0, 노이즈 있음 (3회 반복) - 노이즈 텍스트 COMMON_NOISE_TEXT 사용
TEMPERATURE_SETTING=1.0
NOISE_TEXT_SETTING="$COMMON_NOISE_TEXT"
CATEGORY_BASE_NAME="multi_temp1.0_mislead"
echo -e "\n--- Running Experiments $((EXPERIMENT_COUNT + 1))-$((EXPERIMENT_COUNT + 3)): Multi-Agent, Temp $TEMPERATURE_SETTING, With Noise (3 runs) ---"
for i in {1..3}; do
    run_multi_agent_experiment "$TEMPERATURE_SETTING" "$NOISE_TEXT_SETTING" "$CATEGORY_BASE_NAME" "$i"
done

# 3. Multi-Agent, Temp 1.0, 노이즈 있음 (3회 반복) - 노이즈 텍스트 COMMON_NOISE_TEXT 사용
TEMPERATURE_SETTING=1.0
NOISE_TEXT_SETTING="$COMMON_NOISE_TEXT"
CATEGORY_BASE_NAME="multi_temp1.0_mislead"
echo -e "\n--- Running Experiments $((EXPERIMENT_COUNT + 1))-$((EXPERIMENT_COUNT + 3)): Multi-Agent, Temp $TEMPERATURE_SETTING, With Noise (3 runs) ---"
for i in {1..3}; do
    run_multi_agent_experiment "$TEMPERATURE_SETTING" "$NOISE_TEXT_SETTING" "$CATEGORY_BASE_NAME" "$i"
done

# --- Single Agent 실험 ---
# Single Agent 실험은 이전에 만들어진 함수를 호출합니다.

# 1. Single Agent, Temp 0, 노이즈 있음 (1회)
run_single_agent_experiment 0 "$COMMON_NOISE_TEXT" "single_temp0_with_noise" 1

# 2. Single Agent, Temp 0.5, 노이즈 있음 (3회 반복)
TEMPERATURE_SETTING=0.5
NOISE_TEXT_SETTING="$COMMON_NOISE_TEXT"
CATEGORY_BASE_NAME="single_temp0.5_mislead"
echo -e "\n--- Running Experiments $((EXPERIMENT_COUNT + 1))-$((EXPERIMENT_COUNT + 5)): Single Agent, Temp $TEMPERATURE_SETTING, With Noise (5 runs) ---"
for i in {1..3}; do
    run_single_agent_experiment "$TEMPERATURE_SETTING" "$NOISE_TEXT_SETTING" "$CATEGORY_BASE_NAME" "$i"
done

# 3. Single Agent, Temp 1, 노이즈 있음 (3회 반복)
TEMPERATURE_SETTING=1
NOISE_TEXT_SETTING="$COMMON_NOISE_TEXT"
CATEGORY_BASE_NAME="single_temp0.5_mislead"
echo -e "\n--- Running Experiments $((EXPERIMENT_COUNT + 1))-$((EXPERIMENT_COUNT + 5)): Single Agent, Temp $TEMPERATURE_SETTING, With Noise (5 runs) ---"
for i in {1..3}; do
    run_single_agent_experiment "$TEMPERATURE_SETTING" "$NOISE_TEXT_SETTING" "$CATEGORY_BASE_NAME" "$i"
done

echo -e "\n--- All experiments launched. Total experiments: $EXPERIMENT_COUNT ---"
echo "You can check their individual logs for progress."
echo "Use 'jobs' or 'ps aux | grep python' to monitor them."
echo "Use 'wait' command in your terminal to wait for all background jobs to complete, or 'kill <PID>' to stop them."
